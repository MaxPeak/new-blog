import{o as n,c as s,b as a}from"./app.dfb2eb85.js";const t='{"title":"AST","description":"","frontmatter":{},"headers":[{"level":2,"title":"AST","slug":"ast"},{"level":3,"title":"什么是 AST 抽象语法树","slug":"什么是-ast-抽象语法树"},{"level":3,"title":"它能做什么","slug":"它能做什么"},{"level":3,"title":"什么时候需要用到","slug":"什么时候需要用到"},{"level":3,"title":"例子","slug":"例子"}],"relativePath":"base/compilation.md","lastUpdated":1612510388305}',p={},o=a('<h2 id="ast"><a class="header-anchor" href="#ast" aria-hidden="true">#</a> AST</h2><h3 id="什么是-ast-抽象语法树"><a class="header-anchor" href="#什么是-ast-抽象语法树" aria-hidden="true">#</a> 什么是 AST 抽象语法树</h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；而类似于 if-condition-then 这样的条件跳转语句，可以使用带有两个分支的节点来表示。</p><p>和抽象语法树相对的是具体语法树（通常称作分析树）。一般的，在源代码的翻译和编译过程中，语法分析器创建出分析树，然后从分析树生成 AST。一旦 AST 被创建出来，在后续的处理过程中，比如语义分析阶段，会添加一些信息。</p></div><h3 id="它能做什么"><a class="header-anchor" href="#它能做什么" aria-hidden="true">#</a> 它能做什么</h3><p>它更多的是做代码编译阶段的事，因为这个是属于编译原理里面的基础知识， babel 就是用的 AST 来进行的 ES6 语法转 ES5 语法，只是写新的 class 和 API 是用的 polyfill 来实现的</p><h3 id="什么时候需要用到"><a class="header-anchor" href="#什么时候需要用到" aria-hidden="true">#</a> 什么时候需要用到</h3><p>在读写源代码文件的时候可以用到，比 <code>file</code> 模块更加优雅</p><h3 id="例子"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3><p>改写源码中的函数为可 <a href="http://exports.XXX" target="_blank" rel="noopener noreferrer">exports.XXX</a> 形式</p><div class="language-js"><pre><code><span class="token comment">// 源码 demo.js</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">commonDivision</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      a <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      b <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> a<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code>#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node\n\n<span class="token comment">// 主程序 main.js</span>\n<span class="token keyword">const</span> recast <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;recast&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>\n  identifier<span class="token operator">:</span> id<span class="token punctuation">,</span>\n  expressionStatement<span class="token punctuation">,</span>\n  memberExpression<span class="token punctuation">,</span>\n  assignmentExpression<span class="token punctuation">,</span>\n  arrowFunctionExpression<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> recast<span class="token punctuation">.</span>types<span class="token punctuation">.</span>builders<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 截取参数</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//如果没有参数，或提供了-h 或--help选项，则打印帮助</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>\n  options<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span>\n  options<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;-h&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n  options<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;--help&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    采用commonjs规则，将.js文件内所有函数修改为导出形式。\n\n    选项： -r  或 --rewrite 可直接覆盖原有文件\n    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 只要有-r 或--rewrite参数，则rewriteMode为true</span>\n<span class="token keyword">let</span> rewriteMode <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;-r&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> options<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;--rewrite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 获取文件名</span>\n<span class="token keyword">const</span> clearFileArg <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">&quot;-r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--rewrite&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-h&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--help&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 只处理一个文件</span>\n<span class="token keyword">let</span> filename <span class="token operator">=</span> clearFileArg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">writeASTFile</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> rewriteMode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> newCode <span class="token operator">=</span> recast<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rewriteMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 非覆盖模式下，将新文件写入*.export.js下</span>\n    filename <span class="token operator">=</span> filename\n      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;export&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 将新代码写入文件</span>\n  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> newCode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nrecast<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> printSource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> funcIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  recast<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function">visitFunctionDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//获取遍历到的函数名、参数、块级域</span>\n      <span class="token keyword">const</span> node <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> funcName <span class="token operator">=</span> node<span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> params <span class="token operator">=</span> node<span class="token punctuation">.</span>params<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> body <span class="token operator">=</span> node<span class="token punctuation">.</span>body<span class="token punctuation">;</span>\n\n      funcIds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>funcName<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> rep <span class="token operator">=</span> <span class="token function">expressionStatement</span><span class="token punctuation">(</span>\n        <span class="token function">assignmentExpression</span><span class="token punctuation">(</span>\n          <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span>\n          <span class="token function">memberExpression</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;exports&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> funcName<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token function">arrowFunctionExpression</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> body<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>rep<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  recast<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function">visitCallExpression</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> node <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>funcIds<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        node<span class="token punctuation">.</span>callee <span class="token operator">=</span> <span class="token function">memberExpression</span><span class="token punctuation">(</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;exports&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">writeASTFile</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> rewriteMode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',11);p.render=function(a,t,p,c,e,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
